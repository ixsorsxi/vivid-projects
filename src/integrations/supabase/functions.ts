
// This file is automatically generated. Do not edit it directly.
// This file contains various Supabase RPC function calls and utilities

import { supabase } from './client';

/**
 * Create a new SQL function in Supabase to safely delete a project.
 * This resolves the RLS recursion issue by using a security definer function.
 */
export const createDeleteProjectFunction = async () => {
  // Check if the function already exists by trying to call it
  try {
    await supabase.rpc('delete_project', { p_project_id: '00000000-0000-0000-0000-000000000000' });
    console.log('delete_project function already exists');
    return true;
  } catch (error: any) {
    // If the error is not about the function not existing, return false
    if (!error.message?.includes('does not exist')) {
      console.log('Function exists but returned an error:', error);
      return true; // Function exists but returned another error
    }
    
    console.log('Creating delete_project function...');
    
    // Create the function if it doesn't exist
    try {
      // We need to use a raw query for this, execute it using the REST API
      const { error: createError } = await supabase.from('_exec_sql').select('*').eq('query', `
        CREATE OR REPLACE FUNCTION public.delete_project(p_project_id UUID)
        RETURNS BOOLEAN
        LANGUAGE plpgsql
        SECURITY DEFINER
        SET search_path = public
        AS $$
        DECLARE
          v_project_exists BOOLEAN;
        BEGIN
          -- Check if the project exists and if the user has permission to delete it
          SELECT EXISTS (
            SELECT 1 FROM public.projects
            WHERE id = p_project_id AND user_id = auth.uid()
          ) INTO v_project_exists;
          
          -- If the project doesn't exist or user doesn't have permission, return false
          IF NOT v_project_exists THEN
            RETURN FALSE;
          END IF;
          
          -- Delete associated task_assignees records
          DELETE FROM public.task_assignees ta
          WHERE EXISTS (
            SELECT 1 FROM public.tasks t
            WHERE t.project_id = p_project_id
            AND t.id = ta.task_id
          );
          
          -- Delete associated task_dependencies records
          DELETE FROM public.task_dependencies td
          WHERE EXISTS (
            SELECT 1 FROM public.tasks t
            WHERE t.project_id = p_project_id
            AND (t.id = td.task_id OR t.id = td.dependency_task_id)
          );
          
          -- Delete associated task_subtasks records
          DELETE FROM public.task_subtasks ts
          WHERE EXISTS (
            SELECT 1 FROM public.tasks t
            WHERE t.project_id = p_project_id
            AND t.id = ts.parent_task_id
          );
          
          -- Delete associated tasks
          DELETE FROM public.tasks
          WHERE project_id = p_project_id;
          
          -- Delete associated project_members
          DELETE FROM public.project_members
          WHERE project_id = p_project_id;
          
          -- Finally, delete the project
          DELETE FROM public.projects
          WHERE id = p_project_id;
          
          RETURN TRUE;
        END;
        $$;
      `);
      
      if (createError) {
        console.error('Error creating delete_project function:', createError);
        return false;
      }
      
      console.log('delete_project function created successfully');
      return true;
    } catch (err) {
      console.error('Failed to create delete_project function:', err);
      return false;
    }
  }
};

// Initialize the function when the app loads
createDeleteProjectFunction().catch(err => {
  console.error('Failed to create or verify delete_project function:', err);
});
